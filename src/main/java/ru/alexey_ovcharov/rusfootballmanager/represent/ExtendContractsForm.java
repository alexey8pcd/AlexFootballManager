package ru.alexey_ovcharov.rusfootballmanager.represent;

import ru.alexey_ovcharov.rusfootballmanager.common.MoneyHelper;
import ru.alexey_ovcharov.rusfootballmanager.entities.player.Contract;
import ru.alexey_ovcharov.rusfootballmanager.entities.player.Player;
import ru.alexey_ovcharov.rusfootballmanager.entities.transfer.Filter;

import javax.annotation.Nonnull;
import javax.swing.table.*;
import java.util.*;

/**
 *
 * @author Admin
 */
public class ExtendContractsForm extends javax.swing.JDialog {

    private static final int PLAYER_NAME_AND_LAST_NAME = 0;
    private static final int PLAYER_AGE = 1;
    private static final int FARE = 2;
    private static final int DURATION = 3;
    private static final int IS_EXTENDS = 4;
    private static final int[] COLUMNS = {
            PLAYER_NAME_AND_LAST_NAME,
            PLAYER_AGE,
            FARE,
            DURATION,
            IS_EXTENDS
    };
    private static final String[] HEADERS = {
            "Игрок",
            "Возраст",
            "Зарплата",
            "Длительность",
            "Контракт продлен"
    };

    private List<Player> playerWithExpiringContracts;

    /**
     * Creates new form ExtendContractsForm
     */
    public ExtendContractsForm(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablePlayerContracts = new javax.swing.JTable();
        buttonApply = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Продлить контракты");

        tablePlayerContracts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Игрок", "Возраст", "Зарплата", "Длительность", "Продлить"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Short.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablePlayerContracts);

        buttonApply.setText("Принять");
        buttonApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonApplyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(buttonApply)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(buttonApply)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonApplyActionPerformed
        dispose();
    }//GEN-LAST:event_buttonApplyActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonApply;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablePlayerContracts;
    // End of variables declaration//GEN-END:variables

    public void setPlayers(List<Player> playerWithExpiringContracts) {
        this.playerWithExpiringContracts = playerWithExpiringContracts;
        int[] durations = new int[playerWithExpiringContracts.size()];
        Arrays.fill(durations, Contract.DEFAULT_CONTRACT_DURATION);

        boolean[] accept = new boolean[playerWithExpiringContracts.size()];
        Arrays.fill(accept, true);
        tablePlayerContracts.setModel(new AbstractTableModel() {

            @Override
            public int getRowCount() {
                return playerWithExpiringContracts.size();
            }

            @Override
            public int getColumnCount() {
                return COLUMNS.length;
            }

            @Override
            public Object getValueAt(int rowIndex, int columnIndex) {
                Player player = playerWithExpiringContracts.get(rowIndex);
                switch (columnIndex) {
                    case PLAYER_NAME_AND_LAST_NAME:
                        return player.getNameAbbrAndLastName();
                    case PLAYER_AGE:
                        return player.getAge();
                    case FARE:
                        return MoneyHelper.calculatePayForMatch(player);
                    case DURATION:
                        return durations[rowIndex];
                    case IS_EXTENDS:
                        return accept[rowIndex];
                }
                return "-";
            }

            @Override
            public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
                super.setValueAt(aValue, rowIndex, columnIndex);
                if(columnIndex == IS_EXTENDS) {
                    accept[rowIndex] = (boolean) aValue;
                } else if (columnIndex == DURATION) {
                    if ((int) aValue < Contract.MIN_CONTRACT_DURATION) {
                        aValue = Contract.MIN_CONTRACT_DURATION;
                    } else if ((int) aValue > Contract.MAX_CONTRACT_DURATION) {
                        aValue = Contract.MAX_CONTRACT_DURATION;
                    }
                    durations[rowIndex] = (int) aValue;
                }
            }

            @Override
            public Class<?> getColumnClass(int columnIndex) {
                switch (columnIndex) {
                    case PLAYER_NAME_AND_LAST_NAME:
                        return String.class;
                    case PLAYER_AGE:
                        return Integer.class;
                    case FARE:
                        return Integer.class;
                    case DURATION:
                        return Integer.class;
                    case IS_EXTENDS:
                        return Boolean.class;
                }
                return Object.class;
            }

            private final boolean[] canEdit = new boolean [] {
                    false, false, false, true, true
            };

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableColumnModel columnModel = tablePlayerContracts.getTableHeader().getColumnModel();
        for (int i = 0; i < columnModel.getColumnCount(); i++) {
            TableColumn column = columnModel.getColumn(i);
            column.setHeaderValue(HEADERS[i]);
        }
    }

    @Nonnull
    public Map<Player, Boolean> getResults() {
        TableModel model = tablePlayerContracts.getModel();
        Map<Player, Boolean> map = new HashMap<>();
        for (int row = 0; row < model.getRowCount(); row++) {
            String playerName = (String) model.getValueAt(row, PLAYER_NAME_AND_LAST_NAME);
            int fare = (int) model.getValueAt(row, FARE);
            int duration = (int) model.getValueAt(row, DURATION);
            Boolean isExtends = (Boolean) model.getValueAt(row, IS_EXTENDS);
            Player player = playerWithExpiringContracts.stream()
                                                       .filter(pl -> pl.getNameAbbrAndLastName().equals(playerName))
                                                       .findFirst()
                                                       .orElseThrow(RuntimeException::new);
            if(isExtends){
                player.setContract(new Contract(duration, fare));
                map.put(player, Boolean.TRUE);
            } else {
                map.put(player, Boolean.FALSE);
            }
        }
        return map;
    }
}
